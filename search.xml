<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github + hexo 简单搭建 github.io 网站</title>
    <url>/build_site.html</url>
    <content><![CDATA[<h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><p>这里先说一下我的系统配置以供参考</p>
<blockquote>
<p>Ubuntu 20.04 5.13.0-51-generic x86_64</p>
</blockquote>
<h1 id="本地前置要求"><a href="#本地前置要求" class="headerlink" title="本地前置要求"></a>本地前置要求</h1><ul>
<li><p>node.js &gt;&#x3D; 10.13</p>
</li>
<li><p>Git</p>
</li>
<li><p>hexo</p>
</li>
</ul>
<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p>按照 <a href="https://github.com/nodesource/distributions">官方安装方式</a> , Ubuntu 采用安装命令行, 这里安装的版本是18.4.0.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>进行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure>

<p>出现版本号, 即为安装成功.</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Ubuntu 安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>创建一个空文件夹作为 hexo 安装路径的同时也会是网站根目录.</p>
<blockquote>
<p>为了后述具体,此时假设新建的目录路径为: <font color=red>&#x2F;example</font></p>
</blockquote>
<h1 id="github前置要求"><a href="#github前置要求" class="headerlink" title="github前置要求"></a>github前置要求</h1><ul>
<li><p>github账号</p>
<blockquote>
<p>为了后述具体,此时假设github账号</p>
<p>用户名为: test</p>
<p>邮箱为: <a href="mailto:&#116;&#x65;&#x73;&#116;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#109;">&#116;&#x65;&#x73;&#116;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>密码为: 123456</p>
</blockquote>
</li>
<li><p>ssh密匙</p>
</li>
</ul>
<h2 id="新建网站远程仓库"><a href="#新建网站远程仓库" class="headerlink" title="新建网站远程仓库"></a>新建网站远程仓库</h2><ol>
<li><p>New Repository, 命名为</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">test.github.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 <strong>test.github.io</strong> , 在与 <font color="red">code</font> 同级的 <font color="red">Settings</font>下打开与 <font color="red">General</font> 同级的 <font color="red">Pages</font>. 在<font color="red">Theme Chooser</font> 下选择<font color="red">Choose a theme</font>.</p>
</li>
<li><p>选择好主题后, 把新弹出的界面拉到底部, 选择<strong>commit changes</strong>, 网站就可以访问了.</p>
</li>
<li><p>输入 test.github.io 访问.</p>
</li>
</ol>
<h2 id="设置ssh密匙"><a href="#设置ssh密匙" class="headerlink" title="设置ssh密匙"></a>设置ssh密匙</h2><p>为了hexo能够顺利push到我们的仓库, 需要在本地电脑设置ssh密匙</p>
<ol>
<li><p>检查本机是否有ssh密匙</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure>

<p> 如果存在 <strong>No such file or directory</strong>, 说明你是第一次使用git, 需要创建ssh.</p>
 <br />

<p> 或者</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment">#检查本机已存在的ssh密钥</span></span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p> 没有任何输出, 需要创建ssh.</p>
 <br />

<p> 若有ssh密匙, 直接跳转至第 3 步.</p>
</li>
<li><p>创建ssh密匙</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="built_in">test</span>@163.com</span><br></pre></td></tr></table></figure>

<p> 然后<strong>连续3次回车</strong>, 最终会生成一个文件在 <font color=red>~</font> 下.</p>
</li>
<li><p>打开 <font color=red>~</font> , 找到 <font color=red>.ssh\id_rsa.pub</font> 文件.</p>
<blockquote>
<p>注: 如果打开 <font color=red>~</font> ,没有 <font color=red>.ssh</font> 文件夹, 需要 <kbd>Ctrl</kbd> + <kbd>H</kbd> 显示隐藏文件夹.</p>
</blockquote>
<p> 使用记事本一类的程序打开, 复制所有内容.</p>
</li>
<li><p>打开 github , 点击右上角个人头像, 在弹出的窗口中选择 <font color=red>Settings</font>.<br>然后选择与<font color=red>Public profile</font> 同级 <font color=red>Access</font> 下的<br><font color=red>SHH and GPG keys</font>.</p>
</li>
<li><p>选择 <font color=red>New SSH key </font>.</p>
<blockquote>
<p>title: 随便填</p>
<p>Key: 粘贴从 <font color=red>.ssh\id_rsa.pub</font> 文件复制的内容</p>
</blockquote>
<p> <font color=red>Add SSH key </font>.</p>
</li>
<li><p>测试</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure>

<p> 如果提示<font color=blue>Are you sure you want to continue connecting (yes&#x2F;no)?</font>，输入<strong>yes</strong>, 然后会看到:</p>
<blockquote>
<p>Hi test! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p> 看到这个信息说明SSH已配置成功!</p>
</li>
</ol>
<h2 id="Git本地配置："><a href="#Git本地配置：" class="headerlink" title="Git本地配置："></a>Git本地配置：</h2><p>打开命令行, 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;test&quot;</span>            // 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  <span class="string">&quot;test@163.com&quot;</span>  // 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>

<h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h2 id="加载主题"><a href="#加载主题" class="headerlink" title="加载主题"></a>加载主题</h2><p>在<a href="https://hexo.io/themes/">Hexo官网</a>选择喜欢的主题, 这里以<a href="https://shen-yu.gitee.io/2019/ayer/#%E4%BB%8B%E7%BB%8D">Ayer 主题</a>为例, 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>

<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><ol>
<li><p>主题使用</p>
 <br />

<p> 将 <font color=red>&#x2F;example</font> 目录下的 <strong>_config.yml</strong> 里的 theme 值修改成 ayer</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: ayer</span><br></pre></td></tr></table></figure>
</li>
<li><p>必要插件</p>
 <br />
 
<p> 在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入</p>
 <br />

<ul>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb">搜索</a></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/hexojs/hexo-generator-feed">RSS 订阅</a></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
 <br />

<p> 打开<font color=red>&#x2F;example</font> 目录下的 <strong>_config.yml</strong>, 输入</p>
 <br />

<ul>
<li><a href="https://github.com/theme-next/hexo-generator-searchdb">搜索</a></li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-generator-searchdb</span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/hexojs/hexo-generator-feed">RSS 订阅</a></li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br><span class="line">hub:</span><br><span class="line">content:</span><br><span class="line">content_limit: 140</span><br><span class="line">content_limit_delim: &quot; &quot;</span><br><span class="line">order_by: -date</span><br></pre></td></tr></table></figure>
</li>
<li><p>可选插件</p>
 <br />
 
<p> 在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入</p>
 <br />

<ul>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top">文章置顶</a></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">二次元看板娘</a></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">npm install npm install --save live2d-widget-model-xxx  <span class="comment"># xxx为你选择的模型</span></span><br></pre></td></tr></table></figure>
 <br />

<p> 打开<font color=red>&#x2F;example</font> 目录下的 <strong>_config.yml</strong>, 输入</p>
 <br />

<ul>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top">文章置顶</a></li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 已存在</span><br><span class="line">index_generator:</span><br><span class="line">path: &#x27;&#x27;</span><br><span class="line">per_page: 10</span><br><span class="line">order_by: -date</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">二次元看板娘</a></li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">enable: true</span><br><span class="line">scriptFrom: local</span><br><span class="line">pluginRootPath: live2dw/</span><br><span class="line">pluginJsPath: lib/</span><br><span class="line">pluginModelPath: assets/</span><br><span class="line">tagMode: false</span><br><span class="line">debug: false</span><br><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-wanko  # 选择模型</span><br><span class="line">display:</span><br><span class="line">  position: right</span><br><span class="line">  width: 150</span><br><span class="line">  height: 300</span><br><span class="line">mobile:</span><br><span class="line">  show: true</span><br><span class="line">react:</span><br><span class="line">  opacity: 0.7</span><br></pre></td></tr></table></figure>

<p> 更多插件查看 <a href="https://hexo.io/plugins/">hexo 插件市场</a>.</p>
</li>
<li><p>菜单处理</p>
 <br />

<p> Ayer 初始情况下, 菜单的<font color=blue>分类(categories), 标签(tags), 旅行(tags&#x2F;旅行), 友链(friends), 关于我(2019&#x2F;about)</font>, 点击全部显示 <font color=red>error</font>, 需要初始化.</p>
<p> 模板, 对 XX(path) 的初始化:</p>
 <br />

<p> a. 在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page XX</span><br></pre></td></tr></table></figure>

<p> b. 打开 <font color=red>&#x2F;example&#x2F;source&#x2F;XX</font>, 复制 <strong>index.md</strong> 到 <font color=red>&#x2F;example&#x2F;source&#x2F;path</font>, 删除 <font color=red>&#x2F;example&#x2F;source&#x2F;XX</font> 目录.</p>
 <br />

<p> c. 打开 <strong>index.md</strong>, 全部替换输入</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: XX</span><br><span class="line">type: &quot;XX&quot;</span><br><span class="line">layout: &quot;XX&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地测试</p>
 <br />

<p> 在完成上述操作后网站模板搭建完毕, 可以在本地查看网站效果.</p>
 <br />

<p> 在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo 网站生成命令</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># hexo 网站本地部署命令</span></span><br><span class="line">hexo s -p 8008</span><br></pre></td></tr></table></figure>

<p>打开<font color=blue> <a href="http://localhost:8008/">http://localhost:8008/</a> </font> 即可查看部署效果.</p>
</li>
<li><p>部署处理</p>
 <br />

<p> 在push网站到git之前, 要在<font color=red>&#x2F;example</font> 目录下的 <strong>_config.yml</strong>, 输入</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:test/test.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>在 <font color=red>&#x2F;example</font> 目录下, 打开命令行, 输入下述命令部署到云端.</p>
<br />

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo 网站生成命令</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># hexo 网站云端部署命令</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p> 打开<font color=blue> <a href="https://test.github.io/">https://test.github.io/</a> </font> 即可查看部署效果.</p>
</li>
</ol>
<h2 id="新增页面"><a href="#新增页面" class="headerlink" title="新增页面"></a>新增页面</h2><p>   文章页面的新增和菜单的处理不同.</p>
<ol>
<li><p>在 <font color=red>&#x2F;example&#x2F;source&#x2F;_posts</font> 目录下, 新建md文件.</p>
</li>
<li><p>md写入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名</span><br><span class="line">date: 2022-07-02 21:22:45       # 时间</span><br><span class="line">tags: [网站, hexo, github]      # 标签, 可以填入多个</span><br><span class="line">categories: [网站]              # 只能填入一个</span><br><span class="line">---</span><br><span class="line">正文</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上, 网站搭建完成.</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Mask RCNN Pytorch版本</title>
    <url>/maskrcnn_pytorch.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>本次实现的Mask RCNN主要分为以下几个部分：</p>
<ul>
<li><p>backbone</p>
</li>
<li><p>RPN</p>
</li>
</ul>
<h1 id="backbone"><a href="#backbone" class="headerlink" title="backbone"></a>backbone</h1><p>首先原文提出了四种backbone：</p>
<ul>
<li>resnet50</li>
<li>resnet50 + FPN</li>
<li>resnet101</li>
<li>resnet101 + FPN</li>
</ul>
<p>本次基于resnet101 + FPN实现</p>
<h2 id="resnet101-1"><a href="#resnet101-1" class="headerlink" title="resnet101[1]"></a>resnet101<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[He K, Zhang X, Ren S, et al. Deep residual learning for image recognition[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2016: 770-778.](http://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html)">[1]</span></a></sup></h2><p>就是基础的resnet模型, 可借用torchvision实现</p>
<p><img src="/images/maskrcnn_pytorch/resnet.png" alt="(resnet模型图)"></p>
<h2 id="特征金字塔-FPN-2"><a href="#特征金字塔-FPN-2" class="headerlink" title="特征金字塔(FPN)[2]"></a>特征金字塔(FPN)<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Lin T Y, Dollár P, Girshick R, et al. Feature pyramid networks for object detection[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2017: 2117-2125.](https://arxiv.org/abs/1612.03144)">[2]</span></a></sup></h2><p>FPN, 又称特征金字塔, 初始的FPN使用来进行目标检测的, 但由于其性能, 现大多用来做特征提取.</p>
<p><img src="/images/maskrcnn_pytorch/base_fpn.png" alt="(resnet模型图)"></p>
<p>基础的FPN先对高层特征图<strong>上采样</strong>(2倍的最邻近插值), 再对低层特征图<strong>升维</strong>(1 * 1 卷积), 最后对维度, 高度, 宽度一致的两个特征图进行元素对应相加, 得到融合特征图.</p>
<p><img src="/images/maskrcnn_pytorch/rcnn_fpn.jpg" alt="(resnet模型图)&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;[Mask-RCNN 算法及其实现详解](https://blog.csdn.net/remanented/article/details/79564045)
&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p>
<p>Mask RCNN内的FPN上采样部分不变, 在<strong>升维</strong>部分, 这里的处理是把所有特征图维度处理至<font color="blue">256</font>.</p>
<p>在得到第一次<strong>P5, P4, P3, P2</strong>后, 对每一个特征图作3 * 3 卷积, 输出仍为<font color="blue">256</font>.</p>
<p>如图示, <strong>P6, P5, P4, P3, P2</strong>会送至<strong>RPN层</strong>.</p>
<h1 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html">He K, Zhang X, Ren S, et al. Deep residual learning for image recognition[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2016: 770-778.</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://arxiv.org/abs/1612.03144">Lin T Y, Dollár P, Girshick R, et al. Feature pyramid networks for object detection[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2017: 2117-2125.</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/remanented/article/details/79564045">Mask-RCNN 算法及其实现详解</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>语义分割</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>语义分割</tag>
        <tag>COCO</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 1. 两数之和</title>
    <url>/leetcode1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="使用快速排序-原数组index记录-双指针"><a href="#使用快速排序-原数组index记录-双指针" class="headerlink" title="使用快速排序 + 原数组index记录 + 双指针"></a>使用快速排序 + 原数组index记录 + 双指针</h1><ol>
<li>快速排序 + 原数组index记录</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right: <span class="keyword">return</span></span><br><span class="line">    i, j = left, right</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> nums[j] &gt; nums[left] <span class="keyword">and</span> i &lt; j: j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[i] &lt;= nums[left] <span class="keyword">and</span> i &lt; j: i += <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        idx[i], idx[j] = idx[j], idx[i]</span><br><span class="line">    nums[left], nums[i] = nums[i], nums[left]</span><br><span class="line">    idx[i], idx[left] = idx[left], idx[i]</span><br><span class="line"></span><br><span class="line">    quick_sort(left, i - <span class="number">1</span>)</span><br><span class="line">    quick_sort(i + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>双指针</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i, j = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span> &lt;= i &lt; j &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">    cur = nums[i] + nums[j]</span><br><span class="line">    <span class="keyword">if</span> cur &gt; target:</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> cur &lt; target:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>


<h1 id="官方解法-hash表"><a href="#官方解法-hash表" class="headerlink" title="官方解法: hash表"></a>官方解法: hash表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">in_ = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> target - nums[i] <span class="keyword">in</span> in_:</span><br><span class="line">        <span class="keyword">return</span> [in_[target - nums[i]], i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        in_[nums[i]] = i</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 10. 正则表达式匹配</title>
    <url>/leetcode10.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="动态规划-二维数组"><a href="#动态规划-二维数组" class="headerlink" title="动态规划-二维数组"></a>动态规划-二维数组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isMatch</span>(<span class="params">s, p</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">i, j</span>):</span><br><span class="line">        <span class="comment"># 指针未指向字符串s</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 单个字符匹配任意字符</span></span><br><span class="line">        <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 单个字符一对一匹配</span></span><br><span class="line">        <span class="keyword">return</span> s[i - <span class="number">1</span>] == p[j - <span class="number">1</span>]</span><br><span class="line">    m, n = <span class="built_in">len</span>(s), <span class="built_in">len</span>(p)</span><br><span class="line">    dp = [[<span class="literal">False</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 零到多字符匹配</span></span><br><span class="line">            <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                dp[i][j] |= dp[i][j - <span class="number">2</span>] <span class="comment"># 匹配零个</span></span><br><span class="line">                <span class="keyword">if</span> match(i, j - <span class="number">1</span>):     <span class="comment"># 要进行匹配</span></span><br><span class="line">                    dp[i][j] |= dp[i - <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 一对一字符匹配</span></span><br><span class="line">                <span class="keyword">if</span> match(i, j):</span><br><span class="line">                    dp[i][j] |= dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 11. 盛最多水的容器</title>
    <url>/leetcode11.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="枚举-time-N-x2F-A"><a href="#枚举-time-N-x2F-A" class="headerlink" title="枚举: time N&#x2F;A"></a>枚举: time N&#x2F;A</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">height</span>):</span><br><span class="line">    cur = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(height)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(height)):</span><br><span class="line">            cur = <span class="built_in">max</span>(cur, (j - i) * <span class="built_in">min</span>(height[j], height[i]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure>

<h1 id="双指针收缩"><a href="#双指针收缩" class="headerlink" title="双指针收缩"></a>双指针收缩</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">height</span>):</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">    res = (j - i) * <span class="built_in">min</span>(height[i], height[j])</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">if</span> height[i] &gt;= height[j]: j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: i += <span class="number">1</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, (j - i) * <span class="built_in">min</span>(height[i], height[j]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 15. 三数之和</title>
    <url>/leetcode15.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="快排-双指针"><a href="#快排-双指针" class="headerlink" title="快排 + 双指针"></a>快排 + 双指针</h1><ol>
<li>快排</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right: <span class="keyword">return</span></span><br><span class="line">    i, j = left, right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> nums[j] &gt; nums[left] <span class="keyword">and</span> i &lt; j:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[i] &lt;= nums[left] <span class="keyword">and</span> i &lt; j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    nums[i], nums[left] = nums[left], nums[i]</span><br><span class="line"></span><br><span class="line">    quick_sort(left, i - <span class="number">1</span>)</span><br><span class="line">    quick_sort(i + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>双指针(三指针)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_len - <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> nums[k] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> nums[k] == nums[k - <span class="number">1</span>]: <span class="keyword">continue</span></span><br><span class="line">    i, j = k + <span class="number">1</span>, num_len - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        cur = nums[k] + nums[i] + nums[j]</span><br><span class="line">        <span class="keyword">if</span> cur &gt; <span class="number">0</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]: j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cur &lt; <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]: i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append([nums[k], nums[i], nums[j]])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]: i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] == nums[j + <span class="number">1</span>]: j -= <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 17. 电话号码的字母组合</title>
    <url>/leetcode17.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">digits</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">    hash_ = &#123;<span class="string">&quot;2&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">             <span class="string">&quot;3&quot;</span>: [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>],</span><br><span class="line">             <span class="string">&quot;4&quot;</span>: [<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>],</span><br><span class="line">             <span class="string">&quot;5&quot;</span>: [<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>],</span><br><span class="line">             <span class="string">&quot;6&quot;</span>: [<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>],</span><br><span class="line">             <span class="string">&quot;7&quot;</span>: [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>],</span><br><span class="line">             <span class="string">&quot;8&quot;</span>: [<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>],</span><br><span class="line">             <span class="string">&quot;9&quot;</span>: [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>]&#125;</span><br><span class="line">    </span><br><span class="line">    tmp, res = [<span class="string">&quot;&quot;</span>], []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> digits:</span><br><span class="line">        <span class="keyword">if</span> d <span class="keyword">in</span> hash_:</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> tmp:</span><br><span class="line">                <span class="keyword">for</span> ad <span class="keyword">in</span> hash_[d]:</span><br><span class="line">                    res.append(t + ad)</span><br><span class="line">            <span class="comment"># res += add_</span></span><br><span class="line">            tmp = res</span><br><span class="line">            res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>回溯 + 队列</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">digits</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    hash_ = &#123;<span class="string">&quot;2&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">             <span class="string">&quot;3&quot;</span>: [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>],</span><br><span class="line">             <span class="string">&quot;4&quot;</span>: [<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>],</span><br><span class="line">             <span class="string">&quot;5&quot;</span>: [<span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>],</span><br><span class="line">             <span class="string">&quot;6&quot;</span>: [<span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>],</span><br><span class="line">             <span class="string">&quot;7&quot;</span>: [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>],</span><br><span class="line">             <span class="string">&quot;8&quot;</span>: [<span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>],</span><br><span class="line">             <span class="string">&quot;9&quot;</span>: [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>]&#125;</span><br><span class="line">    </span><br><span class="line">    tmp, res, digit_len = [], [], <span class="built_in">len</span>(digits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">idx, digit_len</span>):</span><br><span class="line">        <span class="keyword">if</span> idx == digit_len:</span><br><span class="line">            res.append(<span class="string">&quot;&quot;</span>.join(tmp))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            digit = digits[idx]</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> hash_[digit]:</span><br><span class="line">                tmp.append(d)</span><br><span class="line">                back(idx + <span class="number">1</span>, digit_len)</span><br><span class="line">                tmp.pop()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    back(<span class="number">0</span>, digit_len)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 2. 两数相加</title>
    <url>/leetcode2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简单遍历链表"><a href="#简单遍历链表" class="headerlink" title="简单遍历链表"></a>简单遍历链表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, cur_num, next_ = l1, l2, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a <span class="keyword">and</span> b:</span><br><span class="line">    total = a.val + b.val + next_</span><br><span class="line">    cur_num = total % <span class="number">10</span></span><br><span class="line">    next_ = total // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    a.val = cur_num</span><br><span class="line">    b.val = cur_num</span><br><span class="line"></span><br><span class="line">    a = a.<span class="built_in">next</span></span><br><span class="line">    b = b.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        total = a.val + next_</span><br><span class="line">        cur_num = total % <span class="number">10</span></span><br><span class="line">        next_ = total // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        a.val = cur_num</span><br><span class="line">        a = a.<span class="built_in">next</span></span><br><span class="line">    res = l1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        total = b.val + next_</span><br><span class="line">        cur_num = total % <span class="number">10</span></span><br><span class="line">        next_ = total // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        b.val = cur_num</span><br><span class="line">        b = b.<span class="built_in">next</span></span><br><span class="line">    res = l2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> next_ &gt; <span class="number">0</span>:</span><br><span class="line">    cur = res</span><br><span class="line">    <span class="keyword">while</span> cur.<span class="built_in">next</span>:</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    cur.<span class="built_in">next</span> = ListNode(next_)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 2089. 找出数组排序后的目标下标</title>
    <url>/leetcode2089.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="排序-查找"><a href="#排序-查找" class="headerlink" title="排序 + 查找"></a>排序 + 查找</h1><ol>
<li>排序: 快速排序</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sort_b2s</span>(<span class="params">nums, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right: <span class="keyword">return</span></span><br><span class="line">    i, j= left, right</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> nums[j] &gt; nums[left] <span class="keyword">and</span> i &lt; j: j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> nums[i] &lt;= nums[left] <span class="keyword">and</span> i &lt; j: i += <span class="number">1</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">    nums[i], nums[left] = nums[left], nums[i]</span><br><span class="line">    sort_b2s(nums, left, i - <span class="number">1</span>)</span><br><span class="line">    sort_b2s(nums, i + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查找: 二分查找</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_left</span>(<span class="params">nums, left, right, x</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = left + right &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt;= x:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_right</span>(<span class="params">nums, left, right, x</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = left + right + <span class="number">1</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; x:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid</span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 2090. 半径为k的子数组平均值</title>
    <url>/leetcode2090.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="使用前缀和-双指针实现"><a href="#使用前缀和-双指针实现" class="headerlink" title="使用前缀和 + 双指针实现"></a>使用前缀和 + 双指针实现</h1><ol>
<li>前缀和</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curs = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    curs.append(curs[-<span class="number">1</span>] + n)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>双指针</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left, right, res, nums_len = -k - <span class="number">1</span>, k - <span class="number">1</span>, [], <span class="built_in">len</span>(nums)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nums_len):</span><br><span class="line">    left += <span class="number">1</span></span><br><span class="line">    right += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; nums_len:</span><br><span class="line">        cur = curs[right + <span class="number">1</span>] - curs[left]</span><br><span class="line">        res.append(cur // (<span class="number">2</span> * k + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res.append(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 3. 无重复字符的最长子串</title>
    <url>/leetcode3.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="哈希表-双指针"><a href="#哈希表-双指针" class="headerlink" title="哈希表 + 双指针"></a>哈希表 + 双指针</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">res, bi, left, right = <span class="number">1</span>, <span class="built_in">set</span>(), <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">bi.add(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">    right += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s[i] <span class="keyword">in</span> bi:</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="keyword">if</span> s[left] != s[i]:</span><br><span class="line">                bi.remove(s[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    bi.add(s[i])</span><br><span class="line">    </span><br><span class="line">    res = <span class="built_in">max</span>(right - left + <span class="number">1</span>, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 4. 寻找两个正序数组的中位数</title>
    <url>/leetcode4.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><ol>
<li>双指针</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len_1, len_2 = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">len_1a2 = len_1 + len_2</span><br><span class="line">mid = len_1a2 &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">l1, l2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">s, m = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> mid &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> l1 &lt; len_1 <span class="keyword">and</span> l2 &lt; len_2:</span><br><span class="line">        <span class="keyword">if</span> nums1[l1] &gt; nums2[l2]:</span><br><span class="line">            cur = nums2[l2]</span><br><span class="line">            l2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = nums1[l1]</span><br><span class="line">            l1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> l1 &lt; len_1:</span><br><span class="line">        cur = nums1[l1]</span><br><span class="line">        l1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur = nums2[l2]</span><br><span class="line">        l2 += <span class="number">1</span></span><br><span class="line">    s, m = m, cur</span><br><span class="line">    mid -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">float</span>(s + m) / <span class="number">2</span> <span class="keyword">if</span> <span class="keyword">not</span> len_1a2 % <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">float</span>(m)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣 5. 最长回文子串</title>
    <url>/leetcode5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expend_substr</span>(<span class="params">left, right</span>):</span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; s_l <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 最终回文的始终</span></span><br><span class="line">    start, end, s_l = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(s_l):</span><br><span class="line">        <span class="comment"># 偶数回文</span></span><br><span class="line">        left, right = expend_substr(i, i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right - left &gt; end - start:</span><br><span class="line">            start, end = left, right</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 奇数回文</span></span><br><span class="line">        left, right = expend_substr(i, i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right - left &gt; end - start:</span><br><span class="line">            start, end = left, right</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s[start: end + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>


<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">s</span>):</span><br><span class="line">    s_len = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">if</span> s_len &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    dp = [[<span class="literal">False</span>] * s_len <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(s_len)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(s_len):</span><br><span class="line">        dp[i][i] = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    max_len, start = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 回文长度</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, s_len + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 回文字符起始位置</span></span><br><span class="line">        <span class="keyword">for</span> st <span class="keyword">in</span> <span class="built_in">range</span>(s_len):</span><br><span class="line">            ed = l + st - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ed &gt;= s_len:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> s[st] != s[ed]:</span><br><span class="line">                dp[st][ed] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> l &lt;= <span class="number">3</span>:</span><br><span class="line">                    dp[st][ed] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[st][ed] = dp[st + <span class="number">1</span>][ed - <span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> dp[st][ed] <span class="keyword">and</span> l &gt; max_len:</span><br><span class="line">                max_len = l</span><br><span class="line">                start = st</span><br><span class="line">    <span class="keyword">return</span> s[start: start + max_len]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
